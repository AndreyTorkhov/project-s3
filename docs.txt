Отчет по проекту "Сервис для чтение текста с картинки"

Описание проекта:
Проект "Сервис для чтение текста с картинки" представляет собой веб-приложение, предоставляющее пользователям возможность загружать изображения на сайт и извлекать текст из них. 

Структура проекта:
Проект основан на базовой структуре для React-приложения, созданной с использованием create-react-app. 
Включает в себя следующие ключевые папки и файлы:
    -build: Компилированный код для развертывания.
    -node-modules: Зависимости проекта.
    -public: Статические файлы, такие как index.html и manifest.json.
    -src: Исходный код приложения, включая компоненты, стили и страницы.
    -README.md: Краткое описание проекта. 
    -package.json: Основной файл конфигурации проекта в Node.js. Необходим для правильной работы npm (Node Package Manager).
    -package-lock.json: Детализированная информацию о точных версиях зависимостей, установленных в проекте. 
    -.gitignore: файл, определяющий какие файлы и папки должны быть проигнорированы системой контроля версий Git. 

Содержание src:
-App.jsx
Назначение: Организует маршрутизацию в приложении с использованием react-router-dom. 
Определяет маршруты для страниц Ml, Login и Register, а также включает общие компоненты Header и Footer.
Зависимости: React, BrowserRouter, Routes, Route, Ml, Login, Register, Footer, Header.

-config.js: Конфигурационные переменные, в данном случае, API_URL. 
Отвечает за централизованное хранение конфигурации приложения, такой как URL-адреса API, токены доступа и другие параметры.

-index.css: Содержит общие стили для всего приложения. 
Отвечает за визуальное оформление элементов, которые применяются на всех страницах.

-index.js: Используется для инициализации и рендеринга основного компонента приложения в корневом элементе DOM. 
Импортирует стили, компоненты и настраивает контекст для передачи данных через дерево компонентов.
Инициализирует MobX store, предоставляет его в контексте и рендерит основной компонент App.
Зависимости: React, ReactDOM, mobx, mobx-react-lite, App, store.

-Папка styles: Содержит стили для каждой отдельной страницы. 
Разделение стилей позволяет поддерживать чистоту и структуру в коде.

-Папка components: Содержит компоненты страницы, такие как footer, header, preloader. 
Эти компоненты могут быть использованы на разных страницах для повторного использования кода.
Компоненты взяты из библиотеки materialize.css для получения готовых компонентов и упрощения стилизации элементов.

-Папка function: Содержит функции, в данном случае, только UploadFile.jsx. 
Эта функция подключается на основной странице (ML) и отправляет изображение на сервер, возвращая результат работы машинного обучения.
Использует стейты для управления данными и статусами загрузки.
Зависимости: React, useState, observer, Preloader, API_URL.

-Папка pages: Содержит функции для каждой из трех страниц приложения: Login.jsx, Register.jsx, ML.jsx. 
Эти компоненты представляют собой страницы приложения и могут содержать уникальные стили и логику.

    Login.jsx:
    Назначение: Представляет страницу авторизации. 
    Использует локальный стейт для хранения данных ввода и обращается к MobX store для выполнения операции входа.
    Зависимости: React, useState, useContext, observer, Link, Context, mobx-react-lite.
    Запросы: 
        /login (POST): Вход пользователя в систему. Метод: POST (login, password)
        /refresh: Проверка авторизации с использованием токена обновления. Метод: POST

    Ml.jsx:
    Назначение: Компонент, представляющий страницу чтения текста с изображений. 
    Использует MobX store для управления состоянием и выполнения операций. Взаимодействует с UploadFile.jsx.
    Зависимости: React, useContext, useEffect, useState, observer, useNavigate, Service, UploadFile.
    Запросы: 
        /history: Получение истории запросов. Метод: GET
        /recognition: Отправка изображения для распознавания текста. Метод: POST (file)
        /refresh: Проверка авторизации с использованием токена обновления. Метод: POST

    Register.jsx:
    Назначение: Компонент страницы регистрации. 
    Использует MobX store для выполнения операции регистрации. 
    Проводит волидацию вводимых данных с помощью регулярных выражений.
    Зависимости: React, useState, useContext, observer, useNavigate, Context.
    Запросы: 
        /register: Регистрация нового пользователя. Метод: POST (username, email, password)
        /refresh: Проверка авторизации с использованием токена обновления. Метод: POST

-Папка http с файлом index.jsx: Файл index.jsx играет роль основного входного файла, объединяющего различные части API настройки. 
Он создает экземпляр Axios и настраивает интерсепторы запросов.
    Связи:
    Импортирует axios для создания экземпляра API.
    Импортирует API_URL из файла config.js.

-Папка services с файлом Service.jsx: Файл назван Service.jsx, так как он предоставляет сервисные методы для взаимодействия с API. 
Класс Service содержит статические методы для выполнения различных запросов к API с использованием Axios.
    Связи:
    Импортирует api из файла http.js для выполнения запросов.

-Папка store с файлом store.jsx: Файл назван store.jsx, так как он отвечает за хранение и управление состоянием приложения с использованием MobX. 
Класс Store представляет собой хранилище состояния для управления данными и состоянием приложения с использованием MobX. 
Методы:
    login(email, password):
        Метод для входа пользователя в систему.
        Выполняет запрос на сервер для входа.
        Обновляет состояние после успешного входа.
    registration(username, email, password):
        Метод для регистрации нового пользователя.
        Выполняет запрос на сервер для регистрации.
        Обновляет состояние после успешной регистрации.
    recognition(file):
        Метод для отправки изображения на сервер для распознавания текста.
        Сохраняет результат в переменной text.
    history():
        Метод для получения истории запросов с сервера.
        Сохраняет данные в переменной historyArray.
    checkAuth():
        Метод для проверки авторизации пользователя.
        Выполняет запрос на сервер с использованием токена обновления.
        Обновляет состояние при успешной проверке.
Связи store.jsx:
    Импортирует makeAutoObservable из MobX для автоматического создания наблюдаемых свойств.
    Импортирует Service из файла Service.jsx для выполнения операций с API.

Технологии:
    React: JavaScript-библиотека для создания интерфейсов.
    Node.js: Среда выполнения на стороне сервера.
    React Router: Навигация для React-приложений.
    JWT: Стандарт токенизации для аутентификации.
    CSS Flexbox и Grid: Модули для создания эффективного макета.
    HTML5, JavaScript (ES6+): Современные языки разметки и программирования.
    Git и GitHub: Система контроля версий и платформа для хранения кода.
    npm: Пакетный менеджер для установки зависимостей.
    Axios: Библиотека для выполнения HTTP-запросов. Используется для взаимодействия с сервером, отправки и получения данных.
    MobX: Библиотека для управления состоянием приложения. Используется для хранения и управления данными, делая их доступными для различных компонентов.

Настройка проекта:
    -Клонируйте репозиторий: git clone https://github.com/AndreyTorkhov/project-s3.git
    -Перейдите в папку проекта: cd project_s3_react
    -Установите зависимости: npm install
    -Запустите приложение: npm start

Уточнение: Для установки и запуска проекта требуется Node.js версии 8+.
